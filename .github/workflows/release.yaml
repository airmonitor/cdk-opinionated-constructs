name: Create Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+a[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+b[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
env:
  PACKAGE_NAME: "cdk-opinionated-constructs"
  OWNER: "airmonitor"

jobs:
  code_quality:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          make venv
          . .venv/bin/activate
          make install

      - name: Run pre-commit
        run: |
          . .venv/bin/activate
          make pre-commit

  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Determine if prerelease
        id: check_prerelease
        run: |
          if [[ ${{ steps.get_tag.outputs.TAG_NAME }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_tag.outputs.TAG_NAME }}
          tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
          prerelease: ${{ steps.check_prerelease.outputs.IS_PRERELEASE }}
          generate_release_notes: true

  setup_and_build:
    name: Setup and build
    needs: [code_quality]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          make venv
          . .venv/bin/activate
          make install

      - name: Build
        run: |
          uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
